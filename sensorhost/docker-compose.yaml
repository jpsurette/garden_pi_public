services:
  save_sensor_data:
    #container_name: save_sensor_data
    build: ./
    image: soil-sensorhost:latest
    logging:
      options:
        max-size: "50m"
        max-file: "3"
    networks:
      - default
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Etc/UTC}
      - ENVIRONMENT=${ENVIRONMENT}
#      - INFLUXDB_HOST=influxdb_${ENVIRONMENT}
    # replace env file as handling credentials exposed in docker
    env_file:
      - .env
    # going to copy these using the Dockerfile rather than volumes
    volumes:
      - ./src/save_sensor_data.py:/app/src/save_sensor_data.py
      - ./.env:/app/src/.env
    command: >
      sh -c "sleep 10s ; python3 ./save_sensor_data.py ;"
    depends_on:
      - mosquitto
      - influxdb
    healthcheck:
      test:
        ["CMD", "python", "save_sensor_data.py", "check_health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Python script that publishes the data from Influx to kafka
  send_sensor_data:
    #container_name: send_sensor_data
    build: ./
    image: soil-sensorhost:latest
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    networks:
      - default
    restart: unless-stopped
    environment:
      - TZ=${TZ:-Etc/UTC}
      - ENVIRONMENT=${ENVIRONMENT}
    env_file:
      - .env
    volumes:
      - ./src/send_sensor_data.py:/app/src/send_sensor_data.py
      - ./.env:/app/src/.env
    command: >
      sh -c "sleep 10s ; python3 ./send_sensor_data.py ;"
    depends_on:
      - influxdb
      - kafka
    healthcheck:
      test:
        ["CMD", "python", "send_sensor_data.py", "check_health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
#    deploy:
#      resources:
#        limits:
#          cpus: "0.2"
#          memory: "256M"

  influxdb:
    #container_name: ${INFLUXDB_HOST}
    image: influxdb:2.7
    restart: unless-stopped
    networks:
      - default
    ports:
      - target: 8086
        published: 8086
        protocol: tcp
        mode: host
    environment:
    - TZ=${TZ:-Etc/UTC}
    - DOCKER_INFLUXDB_INIT_MODE=setup
    - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USER}
    - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
    - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
    - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
    - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
#    - INFLUXDB_HOST=${INFLUXDB_HOST}
    env_file:
      - .env
    volumes:
    - influx_data_volume:/var/lib/influxdb2
    - influx_backup_volume:/var/lib/backup
    - influx_config_volume:/etc/influxdb2
    healthcheck:
      test: "curl -f http://localhost:8086/ping"
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"


  #Kafka messaging for publishing collected sensor data
  kafka:
    #container_name: kafka_${ENVIRONMENT}
    image: 'bitnami/kafka:latest'
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    networks:
      - default
    ports:
      - '9092:9092'
      - '9094:9094'
    restart: unless-stopped
    environment:
      - TZ=Etc/UTC
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://0.0.0.0:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka_${ENVIRONMENT}:9092, EXTERNAL://${HOST_IP}:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT, PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true  # Topics created at publish if don't yet exist
    volumes:
      - kafka_data:/var/lib/kafka
#    deploy:
#      resources:
#        limits:
#          cpus: "0.7"
#          memory: "768M"
    healthcheck:
      test: kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1
      interval: 1s
      timeout: 60s
      retries: 60
      

  # MQTT messages to capture readings from sensors on LAN
  mosquitto:
    image: 'eclipse-mosquitto:2.0'
    networks:
      - default
    user: "1883:1883"
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    restart: unless-stopped
    environment:
    - TZ=${TZ:-Etc/UTC}
#    - MOSQUITTO_HOST=${MOSQUITTO_HOST}
    env_file:
      - .env
    ports:
      - target: 1883
        published: 1883
        protocol: tcp
        mode: host
      - target: 9001
        protocol: tcp
        mode: host
    volumes:
      - type: bind
        source: ./config/mosquitto.conf
        target: /mosquitto/config/mosquitto.conf
        read_only: true
      - type: volume
        source: mosquitto-data
        target: /mosquitto/data/
      - type: volume
        source: mosquitto-logs
        target: /mosquitto/log/
#- ./config/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
#- /home/pi/iot_data/mosquitto/log:/mosquitto/log/
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-t", "$$SYS/#", "-C", "1", "-i", "healthcheck", "-W", "3"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 20s


  grafana:
    image: grafana/grafana
    #container_name: grafana
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"
    restart: unless-stopped
    depends_on:
      - influxdb
    environment:
      - TZ=Etc/UTC
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
#      - INFLUXDB_PORT=${INFLUXDB_PORT}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
    env_file:
      - .env
    links:
      - influxdb
    ports:
      - '3000:3000'
    volumes:
      - grafana_volume:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 15s
      timeout: 5s
      retries: 5


  test-runner:
    build:
      context: .
      dockerfile: tests/Dockerfile
    working_dir: /app/tests
    environment:
      - PYTHONPATH=/app/src:/app/tests:/usr/lib/python3/dist-packages
    volumes:
      - ./tests:/app/tests
      - ./src:/app/src
    profiles:
      - test



volumes:

  influx_data_volume:
  influx_backup_volume:
  influx_config_volume:
  mosquitto-data:
  mosquitto-logs:
  grafana_volume:
  kafka_data:  
#    driver: local
#    driver_opts:
#       o: bind
#       type: none
#       device: /home/pi/iot_data/kafka
#  mosquitto-config:
  # Docker managed to avoid bind mount, may need to spin down volume if config changes
  